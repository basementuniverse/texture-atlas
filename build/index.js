(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it uses a non-standard name for the exports (exports).
(() => {
var exports = __webpack_exports__;
/*!******************!*\
  !*** ./index.ts ***!
  \******************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.textureAtlasContentProcessor = exports.textureAtlas = void 0;
const DEFAULT_REPEATING_REGION_NAME_FORMAT = '{name}-{n}';
const DEFAULT_OPTIONS = {
    relative: true,
    width: 1,
    height: 1,
    regions: {
        default: {
            x: 0,
            y: 0,
        },
    },
};
/**
 * Takes an image and some texture atlas options and returns a dictionary
 * of canvases indexed by region name
 */
function textureAtlas(image, options) {
    var _a, _b, _c, _d;
    const actualOptions = Object.assign({}, DEFAULT_OPTIONS, options !== null && options !== void 0 ? options : {});
    if (actualOptions.width <= 0 || actualOptions.height <= 0) {
        throw new Error('Width and height must be greater than 0');
    }
    if (Object.keys(actualOptions.regions).length === 0) {
        throw new Error('No regions defined');
    }
    const cellWidth = actualOptions.relative
        ? Math.ceil(image.width / actualOptions.width)
        : actualOptions.width;
    const cellHeight = actualOptions.relative
        ? Math.ceil(image.height / actualOptions.height)
        : actualOptions.height;
    const map = {};
    for (const [name, region] of Object.entries(actualOptions.regions)) {
        const absoluteX = Math.floor(region.x * cellWidth);
        const absoluteY = Math.floor(region.y * cellHeight);
        const absoluteWidth = Math.ceil(region.width
            ? (actualOptions.relative
                ? region.width * cellWidth
                : region.width)
            : (actualOptions.relative
                ? cellWidth
                : image.width - absoluteX));
        const absoluteHeight = Math.ceil(region.height
            ? (actualOptions.relative
                ? region.height * cellHeight
                : region.height)
            : (actualOptions.relative
                ? cellHeight
                : image.height - absoluteY));
        if (region.repeat && region.repeat > 0) {
            for (let i = 0; i < region.repeat; i++) {
                const repeatName = getRepeatingRegionName(name, i + 1, region.repeatNameFormat);
                let repeatOffsetX = Math.floor((((_a = region.repeatOffset) === null || _a === void 0 ? void 0 : _a.x) !== undefined &&
                    ((_b = region.repeatOffset) === null || _b === void 0 ? void 0 : _b.x) !== null)
                    ? (actualOptions.relative
                        ? region.repeatOffset.x * cellWidth
                        : region.repeatOffset.x)
                    : cellWidth);
                let repeatOffsetY = Math.floor((((_c = region.repeatOffset) === null || _c === void 0 ? void 0 : _c.y) !== undefined &&
                    ((_d = region.repeatOffset) === null || _d === void 0 ? void 0 : _d.y) !== null)
                    ? (actualOptions.relative
                        ? region.repeatOffset.y * cellHeight
                        : region.repeatOffset.y)
                    : 0);
                map[repeatName] = chopRegion(image, absoluteX + repeatOffsetX * i, absoluteY + repeatOffsetY * i, absoluteWidth, absoluteHeight);
            }
        }
        else {
            map[name] = chopRegion(image, absoluteX, absoluteY, absoluteWidth, absoluteHeight);
        }
    }
    return map;
}
exports.textureAtlas = textureAtlas;
/**
 * Chop a rectangular region from an image into a new canvas
 */
function chopRegion(image, x, y, width, height) {
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    canvas.width = width;
    canvas.height = height;
    if (!context) {
        throw new Error('Failed to get 2D context');
    }
    context.drawImage(image, x, y, width, height, 0, 0, width, height);
    return canvas;
}
/**
 * Get the name of a repeating region
 */
function getRepeatingRegionName(regionName, repetitionIndex, regionNameFormat) {
    return (regionNameFormat !== null && regionNameFormat !== void 0 ? regionNameFormat : DEFAULT_REPEATING_REGION_NAME_FORMAT)
        .replace('{name}', regionName)
        .replace('{n}', repetitionIndex.toString());
}
/**
 * Content Manager Processor wrapper which allows the textureAtlas function
 * to be used as a processor in a Content Manager
 *
 * @see https://www.npmjs.com/package/@basementuniverse/content-manager
 */
async function textureAtlasContentProcessor(content, data, imageName) {
    var _a;
    const image = (_a = content[imageName]) === null || _a === void 0 ? void 0 : _a.content;
    if (!image) {
        throw new Error(`Image '${imageName}' not found`);
    }
    const map = textureAtlas(image, data.content);
    for (const [name, canvas] of Object.entries(map)) {
        content[name] = {
            name,
            type: 'image',
            content: canvas,
            status: 4,
        };
    }
}
exports.textureAtlasContentProcessor = textureAtlasContentProcessor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUE4R0EsTUFBTSxvQ0FBb0MsR0FBRyxZQUFZLENBQUM7QUFDMUQsTUFBTSxlQUFlLEdBQXdCO0lBQzNDLFFBQVEsRUFBRSxJQUFJO0lBQ2QsS0FBSyxFQUFFLENBQUM7SUFDUixNQUFNLEVBQUUsQ0FBQztJQUNULE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRTtZQUNQLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7U0FDTDtLQUNGO0NBQ0YsQ0FBQztBQUVGOzs7R0FHRztBQUNILFNBQWdCLFlBQVksQ0FDMUIsS0FBMkMsRUFDM0MsT0FBc0M7O0lBRXRDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQ2pDLEVBQUUsRUFDRixlQUFlLEVBQ2YsT0FBTyxhQUFQLE9BQU8sY0FBUCxPQUFPLEdBQUksRUFBRSxDQUNkLENBQUM7SUFFRixJQUFJLGFBQWEsQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLGFBQWEsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1FBQ3pELE1BQU0sSUFBSSxLQUFLLENBQUMseUNBQXlDLENBQUMsQ0FBQztLQUM1RDtJQUVELElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUNuRCxNQUFNLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7S0FDdkM7SUFFRCxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsUUFBUTtRQUN0QyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUM7UUFDOUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7SUFDeEIsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLFFBQVE7UUFDdkMsQ0FB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
})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,