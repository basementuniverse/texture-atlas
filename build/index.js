(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it uses a non-standard name for the exports (exports).
(() => {
var exports = __webpack_exports__;
/*!******************!*\
  !*** ./index.ts ***!
  \******************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.textureAtlasContentProcessor = exports.textureAtlas = void 0;
const defaultOptions = {
    relative: true,
    width: 1,
    height: 1,
    regions: {
        default: {
            x: 0,
            y: 0,
        },
    },
};
/**
 * Takes an image and some texture atlas options and returns a dictionary
 * of canvases indexed by region name
 */
function textureAtlas(image, options) {
    const actualOptions = Object.assign({}, defaultOptions, options !== null && options !== void 0 ? options : {});
    if (actualOptions.width <= 0 || actualOptions.height <= 0) {
        throw new Error('Width and height must be greater than 0');
    }
    if (Object.keys(actualOptions.regions).length === 0) {
        throw new Error('No regions defined');
    }
    const cellWidth = actualOptions.relative
        ? Math.ceil(image.width / actualOptions.width)
        : actualOptions.width;
    const cellHeight = actualOptions.relative
        ? Math.ceil(image.height / actualOptions.height)
        : actualOptions.height;
    const map = {};
    for (const [name, region] of Object.entries(actualOptions.regions)) {
        const regionCanvas = document.createElement('canvas');
        const regionContext = regionCanvas.getContext('2d');
        if (!regionContext) {
            throw new Error('Failed to get 2D context');
        }
        const absoluteX = Math.floor(region.x * cellWidth);
        const absoluteY = Math.floor(region.y * cellHeight);
        const absoluteWidth = Math.ceil(region.width
            ? (actualOptions.relative
                ? region.width * cellWidth
                : region.width)
            : (actualOptions.relative
                ? cellWidth
                : image.width - absoluteX));
        const absoluteHeight = Math.ceil(region.height
            ? (actualOptions.relative
                ? region.height * cellHeight
                : region.height)
            : (actualOptions.relative
                ? cellHeight
                : image.height - absoluteY));
        regionCanvas.width = absoluteWidth;
        regionCanvas.height = absoluteHeight;
        regionContext.drawImage(image, absoluteX, absoluteY, absoluteWidth, absoluteHeight, 0, 0, absoluteWidth, absoluteHeight);
        map[name] = regionCanvas;
    }
    return map;
}
exports.textureAtlas = textureAtlas;
/**
 * Content Manager Processor wrapper which allows the textureAtlas function
 * to be used as a processor in a Content Manager
 *
 * @see https://www.npmjs.com/package/@basementuniverse/content-manager
 */
async function textureAtlasContentProcessor(content, data, imageName) {
    var _a;
    const image = (_a = content[imageName]) === null || _a === void 0 ? void 0 : _a.content;
    if (!image) {
        throw new Error(`Image '${imageName}' not found`);
    }
    const map = textureAtlas(image, data);
    for (const [name, canvas] of Object.entries(map)) {
        content[name] = {
            name,
            type: 'image',
            content: canvas,
            status: 4,
        };
    }
}
exports.textureAtlasContentProcessor = textureAtlasContentProcessor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUEwRUEsTUFBTSxjQUFjLEdBQXdCO0lBQzFDLFFBQVEsRUFBRSxJQUFJO0lBQ2QsS0FBSyxFQUFFLENBQUM7SUFDUixNQUFNLEVBQUUsQ0FBQztJQUNULE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRTtZQUNQLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7U0FDTDtLQUNGO0NBQ0YsQ0FBQztBQUVGOzs7R0FHRztBQUNILFNBQWdCLFlBQVksQ0FDMUIsS0FBdUIsRUFDdkIsT0FBc0M7SUFFdEMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FDakMsRUFBRSxFQUNGLGNBQWMsRUFDZCxPQUFPLGFBQVAsT0FBTyxjQUFQLE9BQU8sR0FBSSxFQUFFLENBQ2QsQ0FBQztJQUVGLElBQUksYUFBYSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksYUFBYSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7UUFDekQsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0tBQzVEO0lBRUQsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ25ELE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztLQUN2QztJQUVELE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQyxRQUFRO1FBQ3RDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUM5QyxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztJQUN4QixNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsUUFBUTtRQUN2QyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENB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
})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,