(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it uses a non-standard name for the exports (exports).
(() => {
var exports = __webpack_exports__;
/*!******************!*\
  !*** ./index.ts ***!
  \******************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.textureAtlasContentProcessor = exports.textureAtlas = void 0;
const DEFAULT_REPEATING_REGION_NAME_FORMAT = '{name}-{n}';
const DEFAULT_OPTIONS = {
    relative: true,
    width: 1,
    height: 1,
    regions: {
        default: {
            x: 0,
            y: 0,
        },
    },
    cellMargin: 0,
};
/**
 * Takes an image and some texture atlas options and returns a dictionary
 * of canvases indexed by region name
 */
function textureAtlas(image, options) {
    var _a, _b, _c, _d;
    const actualOptions = Object.assign({}, DEFAULT_OPTIONS, options !== null && options !== void 0 ? options : {});
    if (actualOptions.width <= 0 || actualOptions.height <= 0) {
        throw new Error('Width and height must be greater than 0');
    }
    if (Object.keys(actualOptions.regions).length === 0) {
        throw new Error('No regions defined');
    }
    let cellWidth = 1;
    let cellHeight = 1;
    if (actualOptions.relative) {
        let imageWidth = image.width;
        let imageHeight = image.height;
        if (actualOptions.cellMargin > 0) {
            imageWidth -= actualOptions.cellMargin;
            imageHeight -= actualOptions.cellMargin;
        }
        cellWidth = Math.ceil(imageWidth / actualOptions.width);
        cellHeight = Math.ceil(imageHeight / actualOptions.height);
    }
    const map = {};
    for (const [name, region] of Object.entries(actualOptions.regions)) {
        let absoluteX = Math.floor(region.x * cellWidth);
        let absoluteY = Math.floor(region.y * cellHeight);
        let absoluteWidth = Math.ceil(region.width
            ? (actualOptions.relative
                ? region.width * cellWidth
                : region.width)
            : (actualOptions.relative
                ? cellWidth
                : image.width - absoluteX));
        let absoluteHeight = Math.ceil(region.height
            ? (actualOptions.relative
                ? region.height * cellHeight
                : region.height)
            : (actualOptions.relative
                ? cellHeight
                : image.height - absoluteY));
        if (actualOptions.relative && actualOptions.cellMargin > 0) {
            absoluteX += actualOptions.cellMargin;
            absoluteY += actualOptions.cellMargin;
            absoluteWidth -= actualOptions.cellMargin;
            absoluteHeight -= actualOptions.cellMargin;
        }
        if (region.repeat && region.repeat > 0) {
            for (let i = 0; i < region.repeat; i++) {
                const repeatName = getRepeatingRegionName(name, i + 1, region.repeatNameFormat);
                let repeatOffsetX = Math.floor((((_a = region.repeatOffset) === null || _a === void 0 ? void 0 : _a.x) !== undefined &&
                    ((_b = region.repeatOffset) === null || _b === void 0 ? void 0 : _b.x) !== null)
                    ? (actualOptions.relative
                        ? region.repeatOffset.x * cellWidth
                        : region.repeatOffset.x)
                    : cellWidth);
                let repeatOffsetY = Math.floor((((_c = region.repeatOffset) === null || _c === void 0 ? void 0 : _c.y) !== undefined &&
                    ((_d = region.repeatOffset) === null || _d === void 0 ? void 0 : _d.y) !== null)
                    ? (actualOptions.relative
                        ? region.repeatOffset.y * cellHeight
                        : region.repeatOffset.y)
                    : 0);
                map[repeatName] = chopRegion(image, absoluteX + repeatOffsetX * i, absoluteY + repeatOffsetY * i, absoluteWidth, absoluteHeight);
            }
        }
        else {
            map[name] = chopRegion(image, absoluteX, absoluteY, absoluteWidth, absoluteHeight);
        }
    }
    return map;
}
exports.textureAtlas = textureAtlas;
/**
 * Chop a rectangular region from an image into a new canvas
 */
function chopRegion(image, x, y, width, height) {
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    canvas.width = width;
    canvas.height = height;
    if (!context) {
        throw new Error('Failed to get 2D context');
    }
    context.fillStyle = 'yellow';
    context.fillRect(0, 0, width, height);
    context.drawImage(image, x, y, width, height, 0, 0, width, height);
    return canvas;
}
/**
 * Get the name of a repeating region
 */
function getRepeatingRegionName(regionName, repetitionIndex, regionNameFormat) {
    return (regionNameFormat !== null && regionNameFormat !== void 0 ? regionNameFormat : DEFAULT_REPEATING_REGION_NAME_FORMAT)
        .replace('{name}', regionName)
        .replace('{n}', repetitionIndex.toString());
}
/**
 * Content Manager Processor wrapper which allows the textureAtlas function
 * to be used as a processor in a Content Manager
 *
 * @see https://www.npmjs.com/package/@basementuniverse/content-manager
 */
async function textureAtlasContentProcessor(content, data, imageName) {
    var _a;
    const image = (_a = content[imageName]) === null || _a === void 0 ? void 0 : _a.content;
    if (!image) {
        throw new Error(`Image '${imageName}' not found`);
    }
    const map = textureAtlas(image, data.content);
    for (const [name, canvas] of Object.entries(map)) {
        content[name] = {
            name,
            type: 'image',
            content: canvas,
            status: 4,
        };
    }
}
exports.textureAtlasContentProcessor = textureAtlasContentProcessor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUEySEEsTUFBTSxvQ0FBb0MsR0FBRyxZQUFZLENBQUM7QUFDMUQsTUFBTSxlQUFlLEdBQXdCO0lBQzNDLFFBQVEsRUFBRSxJQUFJO0lBQ2QsS0FBSyxFQUFFLENBQUM7SUFDUixNQUFNLEVBQUUsQ0FBQztJQUNULE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRTtZQUNQLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7U0FDTDtLQUNGO0lBQ0QsVUFBVSxFQUFFLENBQUM7Q0FDZCxDQUFDO0FBRUY7OztHQUdHO0FBQ0gsU0FBZ0IsWUFBWSxDQUMxQixLQUEyQyxFQUMzQyxPQUFzQzs7SUFFdEMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FDakMsRUFBRSxFQUNGLGVBQWUsRUFDZixPQUFPLGFBQVAsT0FBTyxjQUFQLE9BQU8sR0FBSSxFQUFFLENBQ2QsQ0FBQztJQUVGLElBQUksYUFBYSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksYUFBYSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7UUFDekQsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0tBQzVEO0lBRUQsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ25ELE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztLQUN2QztJQUVELElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNsQixJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFFbkIsSUFBSSxhQUFhLENBQUMsUUFBUSxFQUFFO1FBQzFCLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDN0IsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FB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
})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELE87Ozs7Ozs7OztBQ1ZhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9DQUFvQyxHQUFHLG9CQUFvQjtBQUMzRCwrQ0FBK0MsS0FBSyxFQUFFLEVBQUU7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx3RUFBd0U7QUFDbEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbUJBQW1CO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixLQUFLO0FBQ3hCLG1CQUFtQixFQUFFO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsVUFBVTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDLDJDQUEyQyx1cU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYmFzZW1lbnR1bml2ZXJzZS90ZXh0dXJlLWF0bGFzL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9AYmFzZW1lbnR1bml2ZXJzZS90ZXh0dXJlLWF0bGFzLy4vaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIHtcblx0XHR2YXIgYSA9IGZhY3RvcnkoKTtcblx0XHRmb3IodmFyIGkgaW4gYSkgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07XG5cdH1cbn0pKHNlbGYsICgpID0+IHtcbnJldHVybiAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGV4dHVyZUF0bGFzQ29udGVudFByb2Nlc3NvciA9IGV4cG9ydHMudGV4dHVyZUF0bGFzID0gdm9pZCAwO1xuY29uc3QgREVGQVVMVF9SRVBFQVRJTkdfUkVHSU9OX05BTUVfRk9STUFUID0gJ3tuYW1lfS17bn0nO1xuY29uc3QgREVGQVVMVF9PUFRJT05TID0ge1xuICAgIHJlbGF0aXZlOiB0cnVlLFxuICAgIHdpZHRoOiAxLFxuICAgIGhlaWdodDogMSxcbiAgICByZWdpb25zOiB7XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiAwLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgY2VsbE1hcmdpbjogMCxcbn07XG4vKipcbiAqIFRha2VzIGFuIGltYWdlIGFuZCBzb21lIHRleHR1cmUgYXRsYXMgb3B0aW9ucyBhbmQgcmV0dXJucyBhIGRpY3Rpb25hcnlcbiAqIG9mIGNhbnZhc2VzIGluZGV4ZWQgYnkgcmVnaW9uIG5hbWVcbiAqL1xuZnVuY3Rpb24gdGV4dHVyZUF0bGFzKGltYWdlLCBvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIGNvbnN0IGFjdHVhbE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX09QVElPTlMsIG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwID8gb3B0aW9ucyA6IHt9KTtcbiAgICBpZiAoYWN0dWFsT3B0aW9ucy53aWR0aCA8PSAwIHx8IGFjdHVhbE9wdGlvbnMuaGVpZ2h0IDw9IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXaWR0aCBhbmQgaGVpZ2h0IG11c3QgYmUgZ3JlYXRlciB0aGFuIDAnKTtcbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKGFjdHVhbE9wdGlvbnMucmVnaW9ucykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gcmVnaW9ucyBkZWZpbmVkJyk7XG4gICAgfVxuICAgIGxldCBjZWxsV2lkdGggPSAxO1xuICAgIGxldCBjZWxsSGVpZ2h0ID0gMTtcbiAgICBpZiAoYWN0dWFsT3B0aW9ucy5yZWxhdGl2ZSkge1xuICAgICAgICBsZXQgaW1hZ2VXaWR0aCA9IGltYWdlLndpZHRoO1xuICAgICAgICBsZXQgaW1hZ2VIZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgICAgIGlmIChhY3R1YWxPcHRpb25zLmNlbGxNYXJnaW4gPiAwKSB7XG4gICAgICAgICAgICBpbWFnZVdpZHRoIC09IGFjdHVhbE9wdGlvbnMuY2VsbE1hcmdpbjtcbiAgICAgICAgICAgIGltYWdlSGVpZ2h0IC09IGFjdHVhbE9wdGlvbnMuY2VsbE1hcmdpbjtcbiAgICAgICAgfVxuICAgICAgICBjZWxsV2lkdGggPSBNYXRoLmNlaWwoaW1hZ2VXaWR0aCAvIGFjdHVhbE9wdGlvbnMud2lkdGgpO1xuICAgICAgICBjZWxsSGVpZ2h0ID0gTWF0aC5jZWlsKGltYWdlSGVpZ2h0IC8gYWN0dWFsT3B0aW9ucy5oZWlnaHQpO1xuICAgIH1cbiAgICBjb25zdCBtYXAgPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtuYW1lLCByZWdpb25dIG9mIE9iamVjdC5lbnRyaWVzKGFjdHVhbE9wdGlvbnMucmVnaW9ucykpIHtcbiAgICAgICAgbGV0IGFic29sdXRlWCA9IE1hdGguZmxvb3IocmVnaW9uLnggKiBjZWxsV2lkdGgpO1xuICAgICAgICBsZXQgYWJzb2x1dGVZID0gTWF0aC5mbG9vcihyZWdpb24ueSAqIGNlbGxIZWlnaHQpO1xuICAgICAgICBsZXQgYWJzb2x1dGVXaWR0aCA9IE1hdGguY2VpbChyZWdpb24ud2lkdGhcbiAgICAgICAgICAgID8gKGFjdHVhbE9wdGlvbnMucmVsYXRpdmVcbiAgICAgICAgICAgICAgICA/IHJlZ2lvbi53aWR0aCAqIGNlbGxXaWR0aFxuICAgICAgICAgICAgICAgIDogcmVnaW9uLndpZHRoKVxuICAgICAgICAgICAgOiAoYWN0dWFsT3B0aW9ucy5yZWxhdGl2ZVxuICAgICAgICAgICAgICAgID8gY2VsbFdpZHRoXG4gICAgICAgICAgICAgICAgOiBpbWFnZS53aWR0aCAtIGFic29sdXRlWCkpO1xuICAgICAgICBsZXQgYWJzb2x1dGVIZWlnaHQgPSBNYXRoLmNlaWwocmVnaW9uLmhlaWdodFxuICAgICAgICAgICAgPyAoYWN0dWFsT3B0aW9ucy5yZWxhdGl2ZVxuICAgICAgICAgICAgICAgID8gcmVnaW9uLmhlaWdodCAqIGNlbGxIZWlnaHRcbiAgICAgICAgICAgICAgICA6IHJlZ2lvbi5oZWlnaHQpXG4gICAgICAgICAgICA6IChhY3R1YWxPcHRpb25zLnJlbGF0aXZlXG4gICAgICAgICAgICAgICAgPyBjZWxsSGVpZ2h0XG4gICAgICAgICAgICAgICAgOiBpbWFnZS5oZWlnaHQgLSBhYnNvbHV0ZVkpKTtcbiAgICAgICAgaWYgKGFjdHVhbE9wdGlvbnMucmVsYXRpdmUgJiYgYWN0dWFsT3B0aW9ucy5jZWxsTWFyZ2luID4gMCkge1xuICAgICAgICAgICAgYWJzb2x1dGVYICs9IGFjdHVhbE9wdGlvbnMuY2VsbE1hcmdpbjtcbiAgICAgICAgICAgIGFic29sdXRlWSArPSBhY3R1YWxPcHRpb25zLmNlbGxNYXJnaW47XG4gICAgICAgICAgICBhYnNvbHV0ZVdpZHRoIC09IGFjdHVhbE9wdGlvbnMuY2VsbE1hcmdpbjtcbiAgICAgICAgICAgIGFic29sdXRlSGVpZ2h0IC09IGFjdHVhbE9wdGlvbnMuY2VsbE1hcmdpbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVnaW9uLnJlcGVhdCAmJiByZWdpb24ucmVwZWF0ID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZWdpb24ucmVwZWF0OyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXBlYXROYW1lID0gZ2V0UmVwZWF0aW5nUmVnaW9uTmFtZShuYW1lLCBpICsgMSwgcmVnaW9uLnJlcGVhdE5hbWVGb3JtYXQpO1xuICAgICAgICAgICAgICAgIGxldCByZXBlYXRPZmZzZXRYID0gTWF0aC5mbG9vcigoKChfYSA9IHJlZ2lvbi5yZXBlYXRPZmZzZXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS54KSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgICgoX2IgPSByZWdpb24ucmVwZWF0T2Zmc2V0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IueCkgIT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgID8gKGFjdHVhbE9wdGlvbnMucmVsYXRpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVnaW9uLnJlcGVhdE9mZnNldC54ICogY2VsbFdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJlZ2lvbi5yZXBlYXRPZmZzZXQueClcbiAgICAgICAgICAgICAgICAgICAgOiBjZWxsV2lkdGgpO1xuICAgICAgICAgICAgICAgIGxldCByZXBlYXRPZmZzZXRZID0gTWF0aC5mbG9vcigoKChfYyA9IHJlZ2lvbi5yZXBlYXRPZmZzZXQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy55KSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgICgoX2QgPSByZWdpb24ucmVwZWF0T2Zmc2V0KSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QueSkgIT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgID8gKGFjdHVhbE9wdGlvbnMucmVsYXRpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVnaW9uLnJlcGVhdE9mZnNldC55ICogY2VsbEhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgOiByZWdpb24ucmVwZWF0T2Zmc2V0LnkpXG4gICAgICAgICAgICAgICAgICAgIDogMCk7XG4gICAgICAgICAgICAgICAgbWFwW3JlcGVhdE5hbWVdID0gY2hvcFJlZ2lvbihpbWFnZSwgYWJzb2x1dGVYICsgcmVwZWF0T2Zmc2V0WCAqIGksIGFic29sdXRlWSArIHJlcGVhdE9mZnNldFkgKiBpLCBhYnNvbHV0ZVdpZHRoLCBhYnNvbHV0ZUhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtYXBbbmFtZV0gPSBjaG9wUmVnaW9uKGltYWdlLCBhYnNvbHV0ZVgsIGFic29sdXRlWSwgYWJzb2x1dGVXaWR0aCwgYWJzb2x1dGVIZWlnaHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXA7XG59XG5leHBvcnRzLnRleHR1cmVBdGxhcyA9IHRleHR1cmVBdGxhcztcbi8qKlxuICogQ2hvcCBhIHJlY3Rhbmd1bGFyIHJlZ2lvbiBmcm9tIGFuIGltYWdlIGludG8gYSBuZXcgY2FudmFzXG4gKi9cbmZ1bmN0aW9uIGNob3BSZWdpb24oaW1hZ2UsIHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2V0IDJEIGNvbnRleHQnKTtcbiAgICB9XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSAneWVsbG93JztcbiAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgIGNvbnRleHQuZHJhd0ltYWdlKGltYWdlLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICByZXR1cm4gY2FudmFzO1xufVxuLyoqXG4gKiBHZXQgdGhlIG5hbWUgb2YgYSByZXBlYXRpbmcgcmVnaW9uXG4gKi9cbmZ1bmN0aW9uIGdldFJlcGVhdGluZ1JlZ2lvbk5hbWUocmVnaW9uTmFtZSwgcmVwZXRpdGlvbkluZGV4LCByZWdpb25OYW1lRm9ybWF0KSB7XG4gICAgcmV0dXJuIChyZWdpb25OYW1lRm9ybWF0ICE9PSBudWxsICYmIHJlZ2lvbk5hbWVGb3JtYXQgIT09IHZvaWQgMCA/IHJlZ2lvbk5hbWVGb3JtYXQgOiBERUZBVUxUX1JFUEVBVElOR19SRUdJT05fTkFNRV9GT1JNQVQpXG4gICAgICAgIC5yZXBsYWNlKCd7bmFtZX0nLCByZWdpb25OYW1lKVxuICAgICAgICAucmVwbGFjZSgne259JywgcmVwZXRpdGlvbkluZGV4LnRvU3RyaW5nKCkpO1xufVxuLyoqXG4gKiBDb250ZW50IE1hbmFnZXIgUHJvY2Vzc29yIHdyYXBwZXIgd2hpY2ggYWxsb3dzIHRoZSB0ZXh0dXJlQXRsYXMgZnVuY3Rpb25cbiAqIHRvIGJlIHVzZWQgYXMgYSBwcm9jZXNzb3IgaW4gYSBDb250ZW50IE1hbmFnZXJcbiAqXG4gKiBAc2VlIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0BiYXNlbWVudHVuaXZlcnNlL2NvbnRlbnQtbWFuYWdlclxuICovXG5hc3luYyBmdW5jdGlvbiB0ZXh0dXJlQXRsYXNDb250ZW50UHJvY2Vzc29yKGNvbnRlbnQsIGRhdGEsIGltYWdlTmFtZSkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBpbWFnZSA9IChfYSA9IGNvbnRlbnRbaW1hZ2VOYW1lXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbnRlbnQ7XG4gICAgaWYgKCFpbWFnZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEltYWdlICcke2ltYWdlTmFtZX0nIG5vdCBmb3VuZGApO1xuICAgIH1cbiAgICBjb25zdCBtYXAgPSB0ZXh0dXJlQXRsYXMoaW1hZ2UsIGRhdGEuY29udGVudCk7XG4gICAgZm9yIChjb25zdCBbbmFtZSwgY2FudmFzXSBvZiBPYmplY3QuZW50cmllcyhtYXApKSB7XG4gICAgICAgIGNvbnRlbnRbbmFtZV0gPSB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgdHlwZTogJ2ltYWdlJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNhbnZhcyxcbiAgICAgICAgICAgIHN0YXR1czogNCxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLnRleHR1cmVBdGxhc0NvbnRlbnRQcm9jZXNzb3IgPSB0ZXh0dXJlQXRsYXNDb250ZW50UHJvY2Vzc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXBibVJsZUM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUV5U0VFc1RVRkJUU3h2UTBGQmIwTXNSMEZCUnl4WlFVRlpMRU5CUVVNN1FVRkRNVVFzVFVGQlRTeGxRVUZsTEVkQlFYZENPMGxCUXpORExGRkJRVkVzUlVGQlJTeEpRVUZKTzBsQlEyUXNTMEZCU3l4RlFVRkZMRU5CUVVNN1NVRkRVaXhOUVVGTkxFVkJRVVVzUTBGQlF6dEpRVU5VTEU5QlFVOHNSVUZCUlR0UlFVTlFMRTlCUVU4c1JVRkJSVHRaUVVOUUxFTkJRVU1zUlVGQlJTeERRVUZETzFsQlEwb3NRMEZCUXl4RlFVRkZMRU5CUVVNN1UwRkRURHRMUVVOR08wbEJRMFFzVlVGQlZTeEZRVUZGTEVOQlFVTTdRMEZEWkN4RFFVRkRPMEZCUlVZN096dEhRVWRITzBGQlEwZ3NVMEZCWjBJc1dVRkJXU3hEUVVNeFFpeExRVUV5UXl4RlFVTXpReXhQUVVGelF6czdTVUZGZEVNc1RVRkJUU3hoUVVGaExFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZEYWtNc1JVRkJSU3hGUVVOR0xHVkJRV1VzUlVGRFppeFBRVUZQTEdGQlFWQXNUMEZCVHl4alFVRlFMRTlCUVU4c1IwRkJTU3hGUVVGRkxFTkJRMlFzUTBGQlF6dEpRVVZHTEVsQlFVa3NZVUZCWVN4RFFVRkRMRXRCUVVzc1NVRkJTU3hEUVVGRExFbEJRVWtzWVVGQllTeERRVUZETEUxQlFVMHNTVUZCU1N4RFFVRkRMRVZCUVVVN1VVRkRla1FzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl4NVEwRkJlVU1zUTBGQlF5eERRVUZETzB0QlF6VkVPMGxCUlVRc1NVRkJTU3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlF5eEZRVUZGTzFGQlEyNUVMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1EwRkJRenRMUVVOMlF6dEpRVVZFTEVsQlFVa3NVMEZCVXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVOc1FpeEpRVUZKTEZWQlFWVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkZia0lzU1VGQlNTeGhRVUZoTEVOQlFVTXNVVUZCVVN4RlFVRkZPMUZCUXpGQ0xFbEJRVWtzVlVGQlZTeEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNN1VVRkROMElzU1VGQlNTeFhRVUZYTEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJRenRSUVVVdlFpeEpRVUZKTEdGQlFXRXNRMEZCUXl4VlFVRlZMRWRCUVVjc1EwRkJReXhGUVVGRk8xbEJRMmhETEZWQlFWVXNTVUZCU1N4aFFVRmhMRU5CUVVNc1ZVRkJWU3hEUVVGRE8xbEJRM1pETEZkQlFWY3NTVUZCU1N4aFFVRmhMRU5CUVVNc1ZVRkJWU3hEUVVGRE8xTkJRM3BETzFGQlJVUXNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEdGQlFXRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVONFJDeFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFZEJRVWNzWVVGQllTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMHRCUXpWRU8wbEJSVVFzVFVGQlRTeEhRVUZITEVkQlFXOUNMRVZCUVVVc1EwRkJRenRKUVVWb1F5eExRVUZMTEUxQlFVMHNRMEZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExFbEJRVWtzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3VVVGRGJFVXNTVUZCU1N4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4SFFVRkhMRk5CUVZNc1EwRkJReXhEUVVGRE8xRkJRMnBFTEVsQlFVa3NVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSMEZCUnl4VlFVRlZMRU5CUVVNc1EwRkJRenRSUVVOc1JDeEpRVUZKTEdGQlFXRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVNelFpeE5RVUZOTEVOQlFVTXNTMEZCU3p0WlFVTldMRU5CUVVNc1EwRkJReXhEUVVGRExHRkJRV0VzUTBGQlF5eFJRVUZSTzJkQ1FVTnlRaXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NSMEZCUnl4VFFVRlRPMmRDUVVNeFFpeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJRenRaUVVOdVFpeERRVUZETEVOQlFVTXNRMEZCUXl4aFFVRmhMRU5CUVVNc1VVRkJVVHRuUWtGRGNrSXNRMEZCUXl4RFFVRkRMRk5CUVZNN1owSkJRMWdzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRWRCUVVjc1UwRkJVeXhEUVVGRExFTkJRMnBETEVOQlFVTTdVVUZEUml4SlFVRkpMR05CUVdNc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVU0xUWl4TlFVRk5MRU5CUVVNc1RVRkJUVHRaUVVOWUxFTkJRVU1zUTBGQlF5eERRVUZETEdGQlFXRXNRMEZCUXl4UlFVRlJPMmRDUVVOeVFpeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1IwRkJSeXhWUVVGVk8yZENRVU0xUWl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF6dFpRVU53UWl4RFFVRkRMRU5CUVVNc1EwRkJReXhoUVVGaExFTkJRVU1zVVVGQlVUdG5Ra0ZEY2tJc1EwRkJReXhEUVVGRExGVkJRVlU3WjBKQlExb3NRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFZEJRVWNzVTBGQlV5eERRVUZETEVOQlEyeERMRU5CUVVNN1VVRkZSaXhKUVVGSkxHRkJRV0VzUTBGQlF5eFJRVUZSTEVsQlFVa3NZVUZCWVN4RFFVRkRMRlZCUVZVc1IwRkJSeXhEUVVGRExFVkJRVVU3V1VGRE1VUXNVMEZCVXl4SlFVRkpMR0ZCUVdFc1EwRkJReXhWUVVGVkxFTkJRVU03V1VGRGRFTXNVMEZCVXl4SlFVRkpMR0ZCUVdFc1EwRkJReXhWUVVGVkxFTkJRVU03V1VGRmRFTXNZVUZCWVN4SlFVRkpMR0ZCUVdFc1EwRkJReXhWUVVGVkxFTkJRVU03V1VGRE1VTXNZMEZCWXl4SlFVRkpMR0ZCUVdFc1EwRkJReXhWUVVGVkxFTkJRVU03VTBGRE5VTTdVVUZGUkN4SlFVRkpMRTFCUVUwc1EwRkJReXhOUVVGTkxFbEJRVWtzVFVGQlRTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRVZCUVVVN1dVRkRkRU1zUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1owSkJRM1JETEUxQlFVMHNWVUZCVlN4SFFVRkhMSE5DUVVGelFpeERRVU4yUXl4SlFVRkpMRVZCUTBvc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGRFRDeE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRM2hDTEVOQlFVTTdaMEpCUlVZc1NVRkJTU3hoUVVGaExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZETlVJc1EwRkRSU3hEUVVGQkxFMUJRVUVzVFVGQlRTeERRVUZETEZsQlFWa3NNRU5CUVVVc1EwRkJReXhOUVVGTExGTkJRVk03YjBKQlEzQkRMRU5CUVVFc1RVRkJRU3hOUVVGTkxFTkJRVU1zV1VGQldTd3dRMEZCUlN4RFFVRkRMRTFCUVVzc1NVRkJTU3hEUVVOb1F6dHZRa0ZEUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhoUVVGaExFTkJRVU1zVVVGQlVUdDNRa0ZEY2tJc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXl4SFFVRkhMRk5CUVZNN2QwSkJRMjVETEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZETlVJc1EwRkJReXhEUVVGRExGTkJRVk1zUTBGRFpDeERRVUZETzJkQ1FVTkdMRWxCUVVrc1lVRkJZU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlF6VkNMRU5CUTBVc1EwRkJRU3hOUVVGQkxFMUJRVTBzUTBGQlF5eFpRVUZaTERCRFFVRkZMRU5CUVVNc1RVRkJTeXhUUVVGVE8yOUNRVU53UXl4RFFVRkJMRTFCUVVFc1RVRkJUU3hEUVVGRExGbEJRVmtzTUVOQlFVVXNRMEZCUXl4TlFVRkxMRWxCUVVrc1EwRkRhRU03YjBKQlEwTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1lVRkJZU3hEUVVGRExGRkJRVkU3ZDBKQlEzSkNMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNSMEZCUnl4VlFVRlZPM2RDUVVOd1F5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRExFTkJRVU03YjBKQlF6VkNMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRMDRzUTBGQlF6dG5Ra0ZGUml4SFFVRkhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFZEJRVWNzVlVGQlZTeERRVU14UWl4TFFVRkxMRVZCUTB3c1UwRkJVeXhIUVVGSExHRkJRV0VzUjBGQlJ5eERRVUZETEVWQlF6ZENMRk5CUVZNc1IwRkJSeXhoUVVGaExFZEJRVWNzUTBGQlF5eEZRVU0zUWl4aFFVRmhMRVZCUTJJc1kwRkJZeXhEUVVObUxFTkJRVU03WVVGRFNEdFRRVU5HTzJGQlFVMDdXVUZEVEN4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzVlVGQlZTeERRVU53UWl4TFFVRkxMRVZCUTB3c1UwRkJVeXhGUVVOVUxGTkJRVk1zUlVGRFZDeGhRVUZoTEVWQlEySXNZMEZCWXl4RFFVTm1MRU5CUVVNN1UwRkRTRHRMUVVOR08wbEJSVVFzVDBGQlR5eEhRVUZITEVOQlFVTTdRVUZEWWl4RFFVRkRPMEZCYmtoRUxHOURRVzFJUXp0QlFVVkVPenRIUVVWSE8wRkJRMGdzVTBGQlV5eFZRVUZWTEVOQlEycENMRXRCUVRKRExFVkJRek5ETEVOQlFWTXNSVUZEVkN4RFFVRlRMRVZCUTFRc1MwRkJZU3hGUVVOaUxFMUJRV003U1VGRlpDeE5RVUZOTEUxQlFVMHNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBsQlEyaEVMRTFCUVUwc1QwRkJUeXhIUVVGSExFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1NVRkZlRU1zVFVGQlRTeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1NVRkRja0lzVFVGQlRTeERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNN1NVRkZka0lzU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlR0UlFVTmFMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zTUVKQlFUQkNMRU5CUVVNc1EwRkJRenRMUVVNM1F6dEpRVVZFTEU5QlFVOHNRMEZCUXl4VFFVRlRMRWRCUVVjc1VVRkJVU3hEUVVGRE8wbEJRemRDTEU5QlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeExRVUZMTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1NVRkZkRU1zVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUzBGQlN5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMGxCUlc1RkxFOUJRVThzVFVGQlRTeERRVUZETzBGQlEyaENMRU5CUVVNN1FVRkZSRHM3UjBGRlJ6dEJRVU5JTEZOQlFWTXNjMEpCUVhOQ0xFTkJRemRDTEZWQlFXdENMRVZCUTJ4Q0xHVkJRWFZDTEVWQlEzWkNMR2RDUVVGNVFqdEpRVVY2UWl4UFFVRlBMRU5CUVVNc1owSkJRV2RDTEdGQlFXaENMR2RDUVVGblFpeGpRVUZvUWl4blFrRkJaMElzUjBGQlNTeHZRMEZCYjBNc1EwRkJRenRUUVVNNVJDeFBRVUZQTEVOQlFVTXNVVUZCVVN4RlFVRkZMRlZCUVZVc1EwRkJRenRUUVVNM1FpeFBRVUZQTEVOQlFVTXNTMEZCU3l4RlFVRkZMR1ZCUVdVc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF5eERRVUZETzBGQlEyaEVMRU5CUVVNN1FVRkZSRHM3T3pzN1IwRkxSenRCUVVOSkxFdEJRVXNzVlVGQlZTdzBRa0ZCTkVJc1EwRkRhRVFzVDBGTFJTeEZRVU5HTEVsQlMwTXNSVUZEUkN4VFFVRnBRanM3U1VGRmFrSXNUVUZCVFN4TFFVRkxMRWRCUVVjc1RVRkJRU3hQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETERCRFFVRkZMRTlCUVU4c1EwRkJRenRKUVVNeFF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZPMUZCUTFZc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5eFZRVUZWTEZOQlFWTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1MwRkRia1E3U1VGRlJDeE5RVUZOTEVkQlFVY3NSMEZCUnl4WlFVRlpMRU5CUVVNc1MwRkJlVUlzUlVGQlJTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1NVRkZiRVVzUzBGQlN5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTFCUVUwc1EwRkJReXhKUVVGSkxFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVN1VVRkRhRVFzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhPMWxCUTJRc1NVRkJTVHRaUVVOS0xFbEJRVWtzUlVGQlJTeFBRVUZQTzFsQlEySXNUMEZCVHl4RlFVRkZMRTFCUVUwN1dVRkRaaXhOUVVGTkxFVkJRVVVzUTBGQlF6dFRRVU5XTEVOQlFVTTdTMEZEU0R0QlFVTklMRU5CUVVNN1FVRTVRa1FzYjBWQk9FSkRJbjA9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9