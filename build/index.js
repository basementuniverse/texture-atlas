(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it uses a non-standard name for the exports (exports).
(() => {
var exports = __webpack_exports__;
/*!******************!*\
  !*** ./index.ts ***!
  \******************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.textureAtlasContentProcessor = exports.textureAtlas = void 0;
const DEFAULT_REPEATING_REGION_NAME_FORMAT = '{name}-{n}';
const DEFAULT_OPTIONS = {
    relative: true,
    width: 1,
    height: 1,
    regions: {
        default: {
            x: 0,
            y: 0,
        },
    },
    cellMargin: 0,
};
/**
 * Takes an image and some texture atlas options and returns a dictionary
 * of canvases indexed by region name
 */
function textureAtlas(image, options) {
    var _a, _b, _c, _d;
    const actualOptions = Object.assign({}, DEFAULT_OPTIONS, options !== null && options !== void 0 ? options : {});
    if (actualOptions.width <= 0 || actualOptions.height <= 0) {
        throw new Error('Width and height must be greater than 0');
    }
    if (Object.keys(actualOptions.regions).length === 0) {
        throw new Error('No regions defined');
    }
    let cellWidth = 1;
    let cellHeight = 1;
    if (actualOptions.relative) {
        let imageWidth = image.width;
        let imageHeight = image.height;
        if (actualOptions.cellMargin > 0) {
            imageWidth -= actualOptions.cellMargin;
            imageHeight -= actualOptions.cellMargin;
        }
        cellWidth = Math.ceil(imageWidth / actualOptions.width);
        cellHeight = Math.ceil(imageHeight / actualOptions.height);
    }
    const map = {};
    for (const [name, region] of Object.entries(actualOptions.regions)) {
        let absoluteX = Math.floor(region.x * cellWidth);
        let absoluteY = Math.floor(region.y * cellHeight);
        let absoluteWidth = Math.ceil(region.width
            ? (actualOptions.relative
                ? region.width * cellWidth
                : region.width)
            : (actualOptions.relative
                ? cellWidth
                : image.width - absoluteX));
        let absoluteHeight = Math.ceil(region.height
            ? (actualOptions.relative
                ? region.height * cellHeight
                : region.height)
            : (actualOptions.relative
                ? cellHeight
                : image.height - absoluteY));
        if (actualOptions.relative && actualOptions.cellMargin > 0) {
            absoluteX += actualOptions.cellMargin;
            absoluteY += actualOptions.cellMargin;
            absoluteWidth -= actualOptions.cellMargin;
            absoluteHeight -= actualOptions.cellMargin;
        }
        if (region.repeat && region.repeat > 0) {
            for (let i = 0; i < region.repeat; i++) {
                const repeatName = getRepeatingRegionName(name, i + 1, region.repeatNameFormat);
                let repeatOffsetX = Math.floor((((_a = region.repeatOffset) === null || _a === void 0 ? void 0 : _a.x) !== undefined &&
                    ((_b = region.repeatOffset) === null || _b === void 0 ? void 0 : _b.x) !== null)
                    ? (actualOptions.relative
                        ? region.repeatOffset.x * cellWidth
                        : region.repeatOffset.x)
                    : cellWidth);
                let repeatOffsetY = Math.floor((((_c = region.repeatOffset) === null || _c === void 0 ? void 0 : _c.y) !== undefined &&
                    ((_d = region.repeatOffset) === null || _d === void 0 ? void 0 : _d.y) !== null)
                    ? (actualOptions.relative
                        ? region.repeatOffset.y * cellHeight
                        : region.repeatOffset.y)
                    : 0);
                map[repeatName] = chopRegion(image, absoluteX + repeatOffsetX * i, absoluteY + repeatOffsetY * i, absoluteWidth, absoluteHeight);
            }
        }
        else {
            map[name] = chopRegion(image, absoluteX, absoluteY, absoluteWidth, absoluteHeight);
        }
    }
    return map;
}
exports.textureAtlas = textureAtlas;
/**
 * Chop a rectangular region from an image into a new canvas
 */
function chopRegion(image, x, y, width, height) {
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    canvas.width = width;
    canvas.height = height;
    if (!context) {
        throw new Error('Failed to get 2D context');
    }
    context.drawImage(image, x, y, width, height, 0, 0, width, height);
    return canvas;
}
/**
 * Get the name of a repeating region
 */
function getRepeatingRegionName(regionName, repetitionIndex, regionNameFormat) {
    return (regionNameFormat !== null && regionNameFormat !== void 0 ? regionNameFormat : DEFAULT_REPEATING_REGION_NAME_FORMAT)
        .replace('{name}', regionName)
        .replace('{n}', repetitionIndex.toString());
}
/**
 * Content Manager Processor wrapper which allows the textureAtlas function
 * to be used as a processor in a Content Manager
 *
 * @see https://www.npmjs.com/package/@basementuniverse/content-manager
 */
async function textureAtlasContentProcessor(content, data, imageName) {
    var _a;
    const image = (_a = content[imageName]) === null || _a === void 0 ? void 0 : _a.content;
    if (!image) {
        throw new Error(`Image '${imageName}' not found`);
    }
    const map = textureAtlas(image, data.content);
    for (const [name, canvas] of Object.entries(map)) {
        content[name] = {
            name,
            type: 'image',
            content: canvas,
            status: 4,
        };
    }
}
exports.textureAtlasContentProcessor = textureAtlasContentProcessor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUEySEEsTUFBTSxvQ0FBb0MsR0FBRyxZQUFZLENBQUM7QUFDMUQsTUFBTSxlQUFlLEdBQXdCO0lBQzNDLFFBQVEsRUFBRSxJQUFJO0lBQ2QsS0FBSyxFQUFFLENBQUM7SUFDUixNQUFNLEVBQUUsQ0FBQztJQUNULE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRTtZQUNQLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7U0FDTDtLQUNGO0lBQ0QsVUFBVSxFQUFFLENBQUM7Q0FDZCxDQUFDO0FBRUY7OztHQUdHO0FBQ0gsU0FBZ0IsWUFBWSxDQUMxQixLQUEyQyxFQUMzQyxPQUFzQzs7SUFFdEMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FDakMsRUFBRSxFQUNGLGVBQWUsRUFDZixPQUFPLGFBQVAsT0FBTyxjQUFQLE9BQU8sR0FBSSxFQUFFLENBQ2QsQ0FBQztJQUVGLElBQUksYUFBYSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksYUFBYSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7UUFDekQsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0tBQzVEO0lBRUQsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ25ELE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztLQUN2QztJQUVELElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNsQixJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFFbkIsSUFBSSxhQUFhLENBQUMsUUFBUSxFQUFFO1FBQzFCLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDN0IsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FB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
})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELE87Ozs7Ozs7OztBQ1ZhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9DQUFvQyxHQUFHLG9CQUFvQjtBQUMzRCwrQ0FBK0MsS0FBSyxFQUFFLEVBQUU7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx3RUFBd0U7QUFDbEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbUJBQW1CO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLEtBQUs7QUFDeEIsbUJBQW1CLEVBQUU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxVQUFVO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEMsMkNBQTJDLHVoTSIsInNvdXJjZXMiOlsid2VicGFjazovL0BiYXNlbWVudHVuaXZlcnNlL3RleHR1cmUtYXRsYXMvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL0BiYXNlbWVudHVuaXZlcnNlL3RleHR1cmUtYXRsYXMvLi9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2Uge1xuXHRcdHZhciBhID0gZmFjdG9yeSgpO1xuXHRcdGZvcih2YXIgaSBpbiBhKSAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnID8gZXhwb3J0cyA6IHJvb3QpW2ldID0gYVtpXTtcblx0fVxufSkoc2VsZiwgKCkgPT4ge1xucmV0dXJuICIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50ZXh0dXJlQXRsYXNDb250ZW50UHJvY2Vzc29yID0gZXhwb3J0cy50ZXh0dXJlQXRsYXMgPSB2b2lkIDA7XG5jb25zdCBERUZBVUxUX1JFUEVBVElOR19SRUdJT05fTkFNRV9GT1JNQVQgPSAne25hbWV9LXtufSc7XG5jb25zdCBERUZBVUxUX09QVElPTlMgPSB7XG4gICAgcmVsYXRpdmU6IHRydWUsXG4gICAgd2lkdGg6IDEsXG4gICAgaGVpZ2h0OiAxLFxuICAgIHJlZ2lvbnM6IHtcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDAsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBjZWxsTWFyZ2luOiAwLFxufTtcbi8qKlxuICogVGFrZXMgYW4gaW1hZ2UgYW5kIHNvbWUgdGV4dHVyZSBhdGxhcyBvcHRpb25zIGFuZCByZXR1cm5zIGEgZGljdGlvbmFyeVxuICogb2YgY2FudmFzZXMgaW5kZXhlZCBieSByZWdpb24gbmFtZVxuICovXG5mdW5jdGlvbiB0ZXh0dXJlQXRsYXMoaW1hZ2UsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgY29uc3QgYWN0dWFsT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfT1BUSU9OUywgb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge30pO1xuICAgIGlmIChhY3R1YWxPcHRpb25zLndpZHRoIDw9IDAgfHwgYWN0dWFsT3B0aW9ucy5oZWlnaHQgPD0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dpZHRoIGFuZCBoZWlnaHQgbXVzdCBiZSBncmVhdGVyIHRoYW4gMCcpO1xuICAgIH1cbiAgICBpZiAoT2JqZWN0LmtleXMoYWN0dWFsT3B0aW9ucy5yZWdpb25zKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyByZWdpb25zIGRlZmluZWQnKTtcbiAgICB9XG4gICAgbGV0IGNlbGxXaWR0aCA9IDE7XG4gICAgbGV0IGNlbGxIZWlnaHQgPSAxO1xuICAgIGlmIChhY3R1YWxPcHRpb25zLnJlbGF0aXZlKSB7XG4gICAgICAgIGxldCBpbWFnZVdpZHRoID0gaW1hZ2Uud2lkdGg7XG4gICAgICAgIGxldCBpbWFnZUhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgICAgICAgaWYgKGFjdHVhbE9wdGlvbnMuY2VsbE1hcmdpbiA+IDApIHtcbiAgICAgICAgICAgIGltYWdlV2lkdGggLT0gYWN0dWFsT3B0aW9ucy5jZWxsTWFyZ2luO1xuICAgICAgICAgICAgaW1hZ2VIZWlnaHQgLT0gYWN0dWFsT3B0aW9ucy5jZWxsTWFyZ2luO1xuICAgICAgICB9XG4gICAgICAgIGNlbGxXaWR0aCA9IE1hdGguY2VpbChpbWFnZVdpZHRoIC8gYWN0dWFsT3B0aW9ucy53aWR0aCk7XG4gICAgICAgIGNlbGxIZWlnaHQgPSBNYXRoLmNlaWwoaW1hZ2VIZWlnaHQgLyBhY3R1YWxPcHRpb25zLmhlaWdodCk7XG4gICAgfVxuICAgIGNvbnN0IG1hcCA9IHt9O1xuICAgIGZvciAoY29uc3QgW25hbWUsIHJlZ2lvbl0gb2YgT2JqZWN0LmVudHJpZXMoYWN0dWFsT3B0aW9ucy5yZWdpb25zKSkge1xuICAgICAgICBsZXQgYWJzb2x1dGVYID0gTWF0aC5mbG9vcihyZWdpb24ueCAqIGNlbGxXaWR0aCk7XG4gICAgICAgIGxldCBhYnNvbHV0ZVkgPSBNYXRoLmZsb29yKHJlZ2lvbi55ICogY2VsbEhlaWdodCk7XG4gICAgICAgIGxldCBhYnNvbHV0ZVdpZHRoID0gTWF0aC5jZWlsKHJlZ2lvbi53aWR0aFxuICAgICAgICAgICAgPyAoYWN0dWFsT3B0aW9ucy5yZWxhdGl2ZVxuICAgICAgICAgICAgICAgID8gcmVnaW9uLndpZHRoICogY2VsbFdpZHRoXG4gICAgICAgICAgICAgICAgOiByZWdpb24ud2lkdGgpXG4gICAgICAgICAgICA6IChhY3R1YWxPcHRpb25zLnJlbGF0aXZlXG4gICAgICAgICAgICAgICAgPyBjZWxsV2lkdGhcbiAgICAgICAgICAgICAgICA6IGltYWdlLndpZHRoIC0gYWJzb2x1dGVYKSk7XG4gICAgICAgIGxldCBhYnNvbHV0ZUhlaWdodCA9IE1hdGguY2VpbChyZWdpb24uaGVpZ2h0XG4gICAgICAgICAgICA/IChhY3R1YWxPcHRpb25zLnJlbGF0aXZlXG4gICAgICAgICAgICAgICAgPyByZWdpb24uaGVpZ2h0ICogY2VsbEhlaWdodFxuICAgICAgICAgICAgICAgIDogcmVnaW9uLmhlaWdodClcbiAgICAgICAgICAgIDogKGFjdHVhbE9wdGlvbnMucmVsYXRpdmVcbiAgICAgICAgICAgICAgICA/IGNlbGxIZWlnaHRcbiAgICAgICAgICAgICAgICA6IGltYWdlLmhlaWdodCAtIGFic29sdXRlWSkpO1xuICAgICAgICBpZiAoYWN0dWFsT3B0aW9ucy5yZWxhdGl2ZSAmJiBhY3R1YWxPcHRpb25zLmNlbGxNYXJnaW4gPiAwKSB7XG4gICAgICAgICAgICBhYnNvbHV0ZVggKz0gYWN0dWFsT3B0aW9ucy5jZWxsTWFyZ2luO1xuICAgICAgICAgICAgYWJzb2x1dGVZICs9IGFjdHVhbE9wdGlvbnMuY2VsbE1hcmdpbjtcbiAgICAgICAgICAgIGFic29sdXRlV2lkdGggLT0gYWN0dWFsT3B0aW9ucy5jZWxsTWFyZ2luO1xuICAgICAgICAgICAgYWJzb2x1dGVIZWlnaHQgLT0gYWN0dWFsT3B0aW9ucy5jZWxsTWFyZ2luO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWdpb24ucmVwZWF0ICYmIHJlZ2lvbi5yZXBlYXQgPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlZ2lvbi5yZXBlYXQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcGVhdE5hbWUgPSBnZXRSZXBlYXRpbmdSZWdpb25OYW1lKG5hbWUsIGkgKyAxLCByZWdpb24ucmVwZWF0TmFtZUZvcm1hdCk7XG4gICAgICAgICAgICAgICAgbGV0IHJlcGVhdE9mZnNldFggPSBNYXRoLmZsb29yKCgoKF9hID0gcmVnaW9uLnJlcGVhdE9mZnNldCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLngpICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgKChfYiA9IHJlZ2lvbi5yZXBlYXRPZmZzZXQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi54KSAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgPyAoYWN0dWFsT3B0aW9ucy5yZWxhdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZWdpb24ucmVwZWF0T2Zmc2V0LnggKiBjZWxsV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcmVnaW9uLnJlcGVhdE9mZnNldC54KVxuICAgICAgICAgICAgICAgICAgICA6IGNlbGxXaWR0aCk7XG4gICAgICAgICAgICAgICAgbGV0IHJlcGVhdE9mZnNldFkgPSBNYXRoLmZsb29yKCgoKF9jID0gcmVnaW9uLnJlcGVhdE9mZnNldCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnkpICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgKChfZCA9IHJlZ2lvbi5yZXBlYXRPZmZzZXQpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC55KSAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgPyAoYWN0dWFsT3B0aW9ucy5yZWxhdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZWdpb24ucmVwZWF0T2Zmc2V0LnkgKiBjZWxsSGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJlZ2lvbi5yZXBlYXRPZmZzZXQueSlcbiAgICAgICAgICAgICAgICAgICAgOiAwKTtcbiAgICAgICAgICAgICAgICBtYXBbcmVwZWF0TmFtZV0gPSBjaG9wUmVnaW9uKGltYWdlLCBhYnNvbHV0ZVggKyByZXBlYXRPZmZzZXRYICogaSwgYWJzb2x1dGVZICsgcmVwZWF0T2Zmc2V0WSAqIGksIGFic29sdXRlV2lkdGgsIGFic29sdXRlSGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1hcFtuYW1lXSA9IGNob3BSZWdpb24oaW1hZ2UsIGFic29sdXRlWCwgYWJzb2x1dGVZLCBhYnNvbHV0ZVdpZHRoLCBhYnNvbHV0ZUhlaWdodCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbn1cbmV4cG9ydHMudGV4dHVyZUF0bGFzID0gdGV4dHVyZUF0bGFzO1xuLyoqXG4gKiBDaG9wIGEgcmVjdGFuZ3VsYXIgcmVnaW9uIGZyb20gYW4gaW1hZ2UgaW50byBhIG5ldyBjYW52YXNcbiAqL1xuZnVuY3Rpb24gY2hvcFJlZ2lvbihpbWFnZSwgeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIGlmICghY29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBnZXQgMkQgY29udGV4dCcpO1xuICAgIH1cbiAgICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgcmV0dXJuIGNhbnZhcztcbn1cbi8qKlxuICogR2V0IHRoZSBuYW1lIG9mIGEgcmVwZWF0aW5nIHJlZ2lvblxuICovXG5mdW5jdGlvbiBnZXRSZXBlYXRpbmdSZWdpb25OYW1lKHJlZ2lvbk5hbWUsIHJlcGV0aXRpb25JbmRleCwgcmVnaW9uTmFtZUZvcm1hdCkge1xuICAgIHJldHVybiAocmVnaW9uTmFtZUZvcm1hdCAhPT0gbnVsbCAmJiByZWdpb25OYW1lRm9ybWF0ICE9PSB2b2lkIDAgPyByZWdpb25OYW1lRm9ybWF0IDogREVGQVVMVF9SRVBFQVRJTkdfUkVHSU9OX05BTUVfRk9STUFUKVxuICAgICAgICAucmVwbGFjZSgne25hbWV9JywgcmVnaW9uTmFtZSlcbiAgICAgICAgLnJlcGxhY2UoJ3tufScsIHJlcGV0aXRpb25JbmRleC50b1N0cmluZygpKTtcbn1cbi8qKlxuICogQ29udGVudCBNYW5hZ2VyIFByb2Nlc3NvciB3cmFwcGVyIHdoaWNoIGFsbG93cyB0aGUgdGV4dHVyZUF0bGFzIGZ1bmN0aW9uXG4gKiB0byBiZSB1c2VkIGFzIGEgcHJvY2Vzc29yIGluIGEgQ29udGVudCBNYW5hZ2VyXG4gKlxuICogQHNlZSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9AYmFzZW1lbnR1bml2ZXJzZS9jb250ZW50LW1hbmFnZXJcbiAqL1xuYXN5bmMgZnVuY3Rpb24gdGV4dHVyZUF0bGFzQ29udGVudFByb2Nlc3Nvcihjb250ZW50LCBkYXRhLCBpbWFnZU5hbWUpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgaW1hZ2UgPSAoX2EgPSBjb250ZW50W2ltYWdlTmFtZV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb250ZW50O1xuICAgIGlmICghaW1hZ2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbWFnZSAnJHtpbWFnZU5hbWV9JyBub3QgZm91bmRgKTtcbiAgICB9XG4gICAgY29uc3QgbWFwID0gdGV4dHVyZUF0bGFzKGltYWdlLCBkYXRhLmNvbnRlbnQpO1xuICAgIGZvciAoY29uc3QgW25hbWUsIGNhbnZhc10gb2YgT2JqZWN0LmVudHJpZXMobWFwKSkge1xuICAgICAgICBjb250ZW50W25hbWVdID0ge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHR5cGU6ICdpbWFnZScsXG4gICAgICAgICAgICBjb250ZW50OiBjYW52YXMsXG4gICAgICAgICAgICBzdGF0dXM6IDQsXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy50ZXh0dXJlQXRsYXNDb250ZW50UHJvY2Vzc29yID0gdGV4dHVyZUF0bGFzQ29udGVudFByb2Nlc3Nvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTlwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3UVVFeVNFRXNUVUZCVFN4dlEwRkJiME1zUjBGQlJ5eFpRVUZaTEVOQlFVTTdRVUZETVVRc1RVRkJUU3hsUVVGbExFZEJRWGRDTzBsQlF6TkRMRkZCUVZFc1JVRkJSU3hKUVVGSk8wbEJRMlFzUzBGQlN5eEZRVUZGTEVOQlFVTTdTVUZEVWl4TlFVRk5MRVZCUVVVc1EwRkJRenRKUVVOVUxFOUJRVThzUlVGQlJUdFJRVU5RTEU5QlFVOHNSVUZCUlR0WlFVTlFMRU5CUVVNc1JVRkJSU3hEUVVGRE8xbEJRMG9zUTBGQlF5eEZRVUZGTEVOQlFVTTdVMEZEVER0TFFVTkdPMGxCUTBRc1ZVRkJWU3hGUVVGRkxFTkJRVU03UTBGRFpDeERRVUZETzBGQlJVWTdPenRIUVVkSE8wRkJRMGdzVTBGQlowSXNXVUZCV1N4RFFVTXhRaXhMUVVFeVF5eEZRVU16UXl4UFFVRnpRenM3U1VGRmRFTXNUVUZCVFN4aFFVRmhMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGRGFrTXNSVUZCUlN4RlFVTkdMR1ZCUVdVc1JVRkRaaXhQUVVGUExHRkJRVkFzVDBGQlR5eGpRVUZRTEU5QlFVOHNSMEZCU1N4RlFVRkZMRU5CUTJRc1EwRkJRenRKUVVWR0xFbEJRVWtzWVVGQllTeERRVUZETEV0QlFVc3NTVUZCU1N4RFFVRkRMRWxCUVVrc1lVRkJZU3hEUVVGRExFMUJRVTBzU1VGQlNTeERRVUZETEVWQlFVVTdVVUZEZWtRc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5eDVRMEZCZVVNc1EwRkJReXhEUVVGRE8wdEJRelZFTzBsQlJVUXNTVUZCU1N4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4TlFVRk5MRXRCUVVzc1EwRkJReXhGUVVGRk8xRkJRMjVFTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNRMEZCUXp0TFFVTjJRenRKUVVWRUxFbEJRVWtzVTBGQlV5eEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTnNRaXhKUVVGSkxGVkJRVlVzUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZGYmtJc1NVRkJTU3hoUVVGaExFTkJRVU1zVVVGQlVTeEZRVUZGTzFGQlF6RkNMRWxCUVVrc1ZVRkJWU3hIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTTdVVUZETjBJc1NVRkJTU3hYUVVGWExFZEJRVWNzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXp0UlFVVXZRaXhKUVVGSkxHRkJRV0VzUTBGQlF5eFZRVUZWTEVkQlFVY3NRMEZCUXl4RlFVRkZPMWxCUTJoRExGVkJRVlVzU1VGQlNTeGhRVUZoTEVOQlFVTXNWVUZCVlN4RFFVRkRPMWxCUTNaRExGZEJRVmNzU1VGQlNTeGhRVUZoTEVOQlFVTXNWVUZCVlN4RFFVRkRPMU5CUTNwRE8xRkJSVVFzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0UlFVTjRSQ3hWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1lVRkJZU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzB0QlF6VkVPMGxCUlVRc1RVRkJUU3hIUVVGSExFZEJRVzlDTEVWQlFVVXNRMEZCUXp0SlFVVm9ReXhMUVVGTExFMUJRVTBzUTBGQlF5eEpRVUZKTEVWQlFVVXNUVUZCVFN4RFFVRkRMRWxCUVVrc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eGhRVUZoTEVOQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVVVN1VVRkRiRVVzU1VGQlNTeFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEhRVUZITEZOQlFWTXNRMEZCUXl4RFFVRkRPMUZCUTJwRUxFbEJRVWtzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUjBGQlJ5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVTnNSQ3hKUVVGSkxHRkJRV0VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVTXpRaXhOUVVGTkxFTkJRVU1zUzBGQlN6dFpRVU5XTEVOQlFVTXNRMEZCUXl4RFFVRkRMR0ZCUVdFc1EwRkJReXhSUVVGUk8yZENRVU55UWl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUjBGQlJ5eFRRVUZUTzJkQ1FVTXhRaXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXp0WlFVTnVRaXhEUVVGRExFTkJRVU1zUTBGQlF5eGhRVUZoTEVOQlFVTXNVVUZCVVR0blFrRkRja0lzUTBGQlF5eERRVUZETEZOQlFWTTdaMEpCUTFnc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVkQlFVY3NVMEZCVXl4RFFVRkRMRU5CUTJwRExFTkJRVU03VVVGRFJpeEpRVUZKTEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVNMVFpeE5RVUZOTEVOQlFVTXNUVUZCVFR0WlFVTllMRU5CUVVNc1EwRkJReXhEUVVGRExHRkJRV0VzUTBGQlF5eFJRVUZSTzJkQ1FVTnlRaXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNSMEZCUnl4VlFVRlZPMmRDUVVNMVFpeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJRenRaUVVOd1FpeERRVUZETEVOQlFVTXNRMEZCUXl4aFFVRmhMRU5CUVVNc1VVRkJVVHRuUWtGRGNrSXNRMEZCUXl4RFFVRkRMRlZCUVZVN1owSkJRMW9zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRWRCUVVjc1UwRkJVeXhEUVVGRExFTkJRMnhETEVOQlFVTTdVVUZGUml4SlFVRkpMR0ZCUVdFc1EwRkJReXhSUVVGUkxFbEJRVWtzWVVGQllTeERRVUZETEZWQlFWVXNSMEZCUnl4RFFVRkRMRVZCUVVVN1dVRkRNVVFzVTBGQlV5eEpRVUZKTEdGQlFXRXNRMEZCUXl4VlFVRlZMRU5CUVVNN1dVRkRkRU1zVTBGQlV5eEpRVUZKTEdGQlFXRXNRMEZCUXl4VlFVRlZMRU5CUVVNN1dVRkZkRU1zWVVGQllTeEpRVUZKTEdGQlFXRXNRMEZCUXl4VlFVRlZMRU5CUVVNN1dVRkRNVU1zWTBGQll5eEpRVUZKTEdGQlFXRXNRMEZCUXl4VlFVRlZMRU5CUVVNN1UwRkROVU03VVVGRlJDeEpRVUZKTEUxQlFVMHNRMEZCUXl4TlFVRk5MRWxCUVVrc1RVRkJUU3hEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVWQlFVVTdXVUZEZEVNc1MwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRTFCUVUwc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdaMEpCUTNSRExFMUJRVTBzVlVGQlZTeEhRVUZITEhOQ1FVRnpRaXhEUVVOMlF5eEpRVUZKTEVWQlEwb3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkRUQ3hOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUTNoQ0xFTkJRVU03WjBKQlJVWXNTVUZCU1N4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGRE5VSXNRMEZEUlN4RFFVRkJMRTFCUVVFc1RVRkJUU3hEUVVGRExGbEJRVmtzTUVOQlFVVXNRMEZCUXl4TlFVRkxMRk5CUVZNN2IwSkJRM0JETEVOQlFVRXNUVUZCUVN4TlFVRk5MRU5CUVVNc1dVRkJXU3d3UTBGQlJTeERRVUZETEUxQlFVc3NTVUZCU1N4RFFVTm9RenR2UWtGRFF5eERRVUZETEVOQlFVTXNRMEZCUXl4aFFVRmhMRU5CUVVNc1VVRkJVVHQzUWtGRGNrSXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eEhRVUZITEZOQlFWTTdkMEpCUTI1RExFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRE5VSXNRMEZCUXl4RFFVRkRMRk5CUVZNc1EwRkRaQ3hEUVVGRE8yZENRVU5HTEVsQlFVa3NZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRelZDTEVOQlEwVXNRMEZCUVN4TlFVRkJMRTFCUVUwc1EwRkJReXhaUVVGWkxEQkRRVUZGTEVOQlFVTXNUVUZCU3l4VFFVRlRPMjlDUVVOd1F5eERRVUZCTEUxQlFVRXNUVUZCVFN4RFFVRkRMRmxCUVZrc01FTkJRVVVzUTBGQlF5eE5RVUZMTEVsQlFVa3NRMEZEYUVNN2IwSkJRME1zUTBGQlF5eERRVUZETEVOQlFVTXNZVUZCWVN4RFFVRkRMRkZCUVZFN2QwSkJRM0pDTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU1zUjBGQlJ5eFZRVUZWTzNkQ1FVTndReXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJRelZDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUTA0c1EwRkJRenRuUWtGRlJpeEhRVUZITEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1ZVRkJWU3hEUVVNeFFpeExRVUZMTEVWQlEwd3NVMEZCVXl4SFFVRkhMR0ZCUVdFc1IwRkJSeXhEUVVGRExFVkJRemRDTEZOQlFWTXNSMEZCUnl4aFFVRmhMRWRCUVVjc1EwRkJReXhGUVVNM1FpeGhRVUZoTEVWQlEySXNZMEZCWXl4RFFVTm1MRU5CUVVNN1lVRkRTRHRUUVVOR08yRkJRVTA3V1VGRFRDeEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1ZVRkJWU3hEUVVOd1FpeExRVUZMTEVWQlEwd3NVMEZCVXl4RlFVTlVMRk5CUVZNc1JVRkRWQ3hoUVVGaExFVkJRMklzWTBGQll5eERRVU5tTEVOQlFVTTdVMEZEU0R0TFFVTkdPMGxCUlVRc1QwRkJUeXhIUVVGSExFTkJRVU03UVVGRFlpeERRVUZETzBGQmJraEVMRzlEUVcxSVF6dEJRVVZFT3p0SFFVVkhPMEZCUTBnc1UwRkJVeXhWUVVGVkxFTkJRMnBDTEV0QlFUSkRMRVZCUXpORExFTkJRVk1zUlVGRFZDeERRVUZUTEVWQlExUXNTMEZCWVN4RlFVTmlMRTFCUVdNN1NVRkZaQ3hOUVVGTkxFMUJRVTBzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRMmhFTEUxQlFVMHNUMEZCVHl4SFFVRkhMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTVUZGZUVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTTdTVUZEY2tJc1RVRkJUU3hEUVVGRExFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTTdTVUZGZGtJc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJUdFJRVU5hTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNRMEZCUXp0TFFVTTNRenRKUVVWRUxFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUzBGQlN5eEZRVUZGTEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFdEJRVXNzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0SlFVVnVSU3hQUVVGUExFMUJRVTBzUTBGQlF6dEJRVU5vUWl4RFFVRkRPMEZCUlVRN08wZEJSVWM3UVVGRFNDeFRRVUZUTEhOQ1FVRnpRaXhEUVVNM1FpeFZRVUZyUWl4RlFVTnNRaXhsUVVGMVFpeEZRVU4yUWl4blFrRkJlVUk3U1VGRmVrSXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeGhRVUZvUWl4blFrRkJaMElzWTBGQmFFSXNaMEpCUVdkQ0xFZEJRVWtzYjBOQlFXOURMRU5CUVVNN1UwRkRPVVFzVDBGQlR5eERRVUZETEZGQlFWRXNSVUZCUlN4VlFVRlZMRU5CUVVNN1UwRkROMElzVDBGQlR5eERRVUZETEV0QlFVc3NSVUZCUlN4bFFVRmxMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU5vUkN4RFFVRkRPMEZCUlVRN096czdPMGRCUzBjN1FVRkRTU3hMUVVGTExGVkJRVlVzTkVKQlFUUkNMRU5CUTJoRUxFOUJTMFVzUlVGRFJpeEpRVXRETEVWQlEwUXNVMEZCYVVJN08wbEJSV3BDTEUxQlFVMHNTMEZCU3l4SFFVRkhMRTFCUVVFc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5d3dRMEZCUlN4UFFVRlBMRU5CUVVNN1NVRkRNVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlR0UlFVTldMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zVlVGQlZTeFRRVUZUTEdGQlFXRXNRMEZCUXl4RFFVRkRPMHRCUTI1RU8wbEJSVVFzVFVGQlRTeEhRVUZITEVkQlFVY3NXVUZCV1N4RFFVRkRMRXRCUVhsQ0xFVkJRVVVzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMGxCUld4RkxFdEJRVXNzVFVGQlRTeERRVUZETEVsQlFVa3NSVUZCUlN4TlFVRk5MRU5CUVVNc1NVRkJTU3hOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZPMUZCUTJoRUxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnp0WlFVTmtMRWxCUVVrN1dVRkRTaXhKUVVGSkxFVkJRVVVzVDBGQlR6dFpRVU5pTEU5QlFVOHNSVUZCUlN4TlFVRk5PMWxCUTJZc1RVRkJUU3hGUVVGRkxFTkJRVU03VTBGRFZpeERRVUZETzB0QlEwZzdRVUZEU0N4RFFVRkRPMEZCT1VKRUxHOUZRVGhDUXlKOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==